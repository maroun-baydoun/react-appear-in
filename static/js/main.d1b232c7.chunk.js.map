{"version":3,"sources":["CellContainer/Cell/random.ts","CellContainer/Cell/Cell.tsx","CellContainer/CellContainer.tsx","App/App.tsx","index.tsx"],"names":["generateRandomNumber","min","max","Math","floor","random","grow","keyframes","_templateObject","StyledCellPlaceholder","styled","_templateObject2","props","css","_templateObject3","time","StyledCellContent","_templateObject4","StyledContainer","_templateObject5","TimeContainer","_templateObject6","Cell","_useState","useState","Object","objectSpread","milliseconds","minutes","seconds","_useState2$","slicedToArray","placeholder","useCallback","react_default","a","createElement","react_appear_in_default","CellContainer_templateObject","CellContainer","CellContainer_StyledContainer","toConsumableArray","Array","map","_","i","CellContainer_Cell_Cell","key","GlobalStyle","createGlobalStyle","App_templateObject","App","styled_components_browser_esm","theme","react","src_CellContainer_CellContainer","Component","ReactDOM","render","src_App_App","document","getElementById"],"mappings":"qQACaA,EAAuB,SAACC,EAAaC,GAAd,OAClCC,KAAKC,MAAMD,KAAKE,SAAWH,GAAOD,0/BCIpC,IA2BMK,EAAOC,YAAHC,KAUJC,EAAwBC,YAAO,MAAPA,CAAHC,IACX,SAAAC,GAAK,OAAIC,YAAJC,IAAUR,EAAQM,EAAMG,QAOvCC,EAAoBN,YAAO,MAAPA,CAAHO,KAUjBC,EAAkBR,YAAO,MAAPA,CAAHS,KAafC,EAAgBV,YAAO,MAAPA,CAAHW,KAKJC,EAzEF,WAAM,IAAAC,EAC4BC,mBAASC,OAAAC,EAAA,EAAAD,CAAA,GDHf,CACvCE,aAAc3B,EAAqB,GAAI,KACvC4B,QAAS5B,EAAqB,EAAG,GACjC6B,QAAS7B,EAAqB,EAAG,OCDhB8B,EAAAL,OAAAM,EAAA,EAAAN,CAAAF,EAAA,MACRK,EADQE,EACRF,QAASC,EADDC,EACCD,QAASF,EADVG,EACUH,aAErBK,EAAcC,sBAClB,SAAClB,GAAD,OACAmB,EAAAC,EAAAC,cAAC3B,EAAD,CAAuBM,KAAMA,KAE7B,IAGF,OACEmB,EAAAC,EAAAC,cAAClB,EAAD,KACEgB,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACEP,QAASA,EACTC,QAASA,EACTF,aAAcA,EACdK,YAAaA,GAEbE,EAAAC,EAAAC,cAACpB,EAAD,KACEkB,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAChB,EAAD,KAAgBQ,EAAhB,MAA4BC,EAA5B,MAAwCF,EAAxC,sLCtBV,IAMMT,EAAkBR,YAAO,MAAPA,CAAH4B,KAONC,EAbO,kBAClBL,EAAAC,EAAAC,cAACI,EAAD,KACGf,OAAAgB,EAAA,EAAAhB,CAAIiB,MAAM,MAAMC,IAAI,SAACC,EAAGC,GAAJ,OAAUX,EAAAC,EAAAC,cAACU,EAAD,CAAMC,IAAKF,2OCDhD,IAAMG,EAAcC,YAAHC,KA2BFC,mLAZX,OACIjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAeC,MAAO,IACpBnB,EAAAC,EAAAC,cAACkB,EAAA,SAAD,KACEpB,EAAAC,EAAAC,cAACY,EAAD,MACAd,EAAAC,EAAAC,cAACmB,EAAD,eANMC,aCblBC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.d1b232c7.chunk.js","sourcesContent":["\nexport const generateRandomNumber = (min: number, max: number) =>\n  Math.floor(Math.random() * max) + min ;\n\nexport const generateRandomTime = () => ({\n  milliseconds: generateRandomNumber(10, 100),\n  minutes: generateRandomNumber(0, 2),\n  seconds: generateRandomNumber(5, 30),\n});\n","import React, { useCallback, useState } from 'react';\nimport AppearIn from 'react-appear-in';\nimport styled, { css, keyframes } from 'styled-components';\n\nimport { generateRandomTime } from './random';\n\nconst Cell = () => {\n  const [{ minutes, seconds, milliseconds }] = useState({ ...generateRandomTime() });\n\n  const placeholder = useCallback(\n    (time: number) => (\n    <StyledCellPlaceholder time={time} />\n  ),\n    [],\n  );\n\n  return (\n    <StyledContainer>\n      <AppearIn\n        minutes={minutes}\n        seconds={seconds}\n        milliseconds={milliseconds}\n        placeholder={placeholder}\n      >\n        <StyledCellContent>\n          <div>I appeared after</div>\n          <TimeContainer>{minutes}m. {seconds}s. {milliseconds}ms.</TimeContainer>\n        </StyledCellContent>\n      </AppearIn>\n    </StyledContainer>\n  );\n};\n\nconst grow = keyframes`\n  from {\n    width: 0;\n  }\n\n  to {\n    width: 100%;\n  }\n`;\n\nconst StyledCellPlaceholder = styled('div')<{time: number}>`\n  animation: ${ props => css`${grow} ${props.time}ms linear;`}\n  background-color: #efefef;\n  border-radius: 10px;\n  display: flex;\n  flex-grow: 1;\n`;\n\nconst StyledCellContent = styled('div')`\n  background-color: #efefef;\n  border-radius: 10px;\n  display: flex;\n  flex-grow: 1;\n  flex-direction: column;\n  justify-content: center;\n  text-align: center;\n`;\n\nconst StyledContainer = styled('div')`\n  background-color: darkgrey;\n  color: #ccc;\n  width: 150px;\n  height: 100px;\n  margin: 5px;\n  padding: 5px;\n  border-radius: 10px;\n  display: flex;\n  flex-grow: 1;\n  flex-direction: column;\n`;\n\nconst TimeContainer = styled('div')`\n  margin-top: 5px;\n  color: #aaa;\n`;\n\nexport default Cell;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Cell from './Cell';\n\nconst CellContainer = () => (\n    <StyledContainer>\n      {[...Array(100)].map((_, i) => <Cell key={i} />)}\n    </StyledContainer>\n  );\n\nconst StyledContainer = styled('div')`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  background-color: grey;\n`;\n\nexport default CellContainer;\n","import React, { Component, Fragment } from 'react';\nimport { createGlobalStyle, ThemeProvider } from 'styled-components';\n\nimport CellContainer from '../CellContainer';\n\nconst GlobalStyle = createGlobalStyle`\n  html, body {\n    padding: 0;\n    margin: 0;\n    width: 100%;\n    height: 100%;\n  }\n\n  body {\n    font-family: Arial, Helvetica, sans-serif;\n  }\n`;\n\nclass App extends Component {\n  render() {\n    return (\n        <ThemeProvider theme={{}}>\n          <Fragment>\n            <GlobalStyle/>\n            <CellContainer/>\n          </Fragment>\n        </ThemeProvider>\n\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}