{"version":3,"sources":["CellContainer/Cell/random.ts","CellContainer/Cell/Cell.tsx","CellContainer/CellContainer.tsx","App/App.tsx","index.tsx"],"names":["generateRandomNumber","min","max","Math","floor","random","generateRandomTime","milliseconds","minutes","seconds","Cell","state","_this$state","this","react_default","a","createElement","StyledContainer","react_appear_in_default","TimeContainer","PureComponent","styled","_templateObject","_templateObject2","CellContainer","CellContainer_StyledContainer","Object","toConsumableArray","Array","map","_","i","CellContainer_Cell_Cell","key","CellContainer_templateObject","GlobalStyle","createGlobalStyle","App_templateObject","App","styled_components_browser_esm","theme","react","src_CellContainer_CellContainer","Component","ReactDOM","render","src_App_App","document","getElementById"],"mappings":"0PACaA,EAAuB,SAACC,EAAaC,GAAd,OAClCC,KAAKC,MAAMD,KAAKE,SAAWH,GAAOD,GAEvBK,EAAqB,iBAAO,CACvCC,aAAcP,EAAqB,GAAI,KACvCQ,QAASR,EAAqB,EAAG,GACjCS,QAAST,EAAqB,EAAG,gaCK7BU,6MACJC,qBAAaL,6EAEJ,IAAAM,EACoCC,KAAKF,MAAxCH,EADDI,EACCJ,QAASC,EADVG,EACUH,QAASF,EADnBK,EACmBL,aAC1B,OACEO,EAAAC,EAAAC,cAACC,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAUP,QAASA,EAASC,QAASA,EAASF,aAAcA,GAC1DO,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAACG,EAAD,KAAgBX,EAAhB,MAA4BC,EAA5B,MAAwCF,EAAxC,gBATSa,iBAgBbH,EAAkBI,YAAO,MAAPA,CAAHC,KAcfH,EAAgBE,YAAO,MAAPA,CAAHE,KAKJb,mLC3CTc,mLAGF,OACIV,EAAAC,EAAAC,cAACS,EAAD,KACCC,OAAAC,EAAA,EAAAD,CAAIE,MAAM,MAAMC,IAAI,SAACC,EAAGC,GAAJ,OAAWjB,EAAAC,EAAAC,cAACgB,EAAD,CAAMC,IAAKF,cALvBX,iBAWtBH,EAAkBI,YAAO,MAAPA,CAAHa,KAONV,uOCjBf,IAAMW,EAAcC,YAAHC,KA2BFC,mLAZX,OACIxB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAeC,MAAO,IACpB1B,EAAAC,EAAAC,cAACyB,EAAA,SAAD,KACE3B,EAAAC,EAAAC,cAACmB,EAAD,MACArB,EAAAC,EAAAC,cAAC0B,EAAD,eANMC,aCblBC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.e59c063e.chunk.js","sourcesContent":["\nexport const generateRandomNumber = (min: number, max: number) =>\n  Math.floor(Math.random() * max) + min ;\n\nexport const generateRandomTime = () => ({\n  milliseconds: generateRandomNumber(10, 100),\n  minutes: generateRandomNumber(0, 2),\n  seconds: generateRandomNumber(5, 30),\n});\n","import React , { PureComponent } from 'react';\nimport AppearIn from 'react-appear-in';\nimport styled from 'styled-components';\n\nimport { generateRandomTime } from './random';\n\ntype State = {\n  minutes: number,\n  seconds: number,\n  milliseconds: number,\n};\n\nclass Cell extends PureComponent<{}, State> {\n  state = { ...generateRandomTime() };\n\n  render() {\n    const { minutes, seconds, milliseconds } = this.state;\n    return (\n      <StyledContainer>\n        <AppearIn minutes={minutes} seconds={seconds} milliseconds={milliseconds}>\n          <div>I appeared after</div>\n          <TimeContainer>{minutes}m. {seconds}s. {milliseconds}ms.</TimeContainer>\n        </AppearIn>\n      </StyledContainer>\n    );\n  }\n}\n\nconst StyledContainer = styled('div')`\n  background-color: darkgrey;\n  color: #eee;\n  width: 150px;\n  height: 100px;\n  margin: 5px;\n  padding: 5px;\n  display: flex;\n  flex-grow: 1;\n  flex-direction: column;\n  justify-content: center;\n  text-align: center;\n`;\n\nconst TimeContainer = styled('div')`\n  margin-top: 5px;\n  color: #fff;\n`;\n\nexport default Cell;\n","import React , { Fragment, PureComponent } from 'react';\nimport styled from 'styled-components';\nimport Cell from './Cell';\n\nclass CellContainer extends PureComponent {\n\n  render() {\n    return (\n        <StyledContainer>\n        {[...Array(100)].map((_, i)  => <Cell key={i}/>)}\n        </StyledContainer>\n    );\n  }\n}\n\nconst StyledContainer = styled('div')`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  background-color: grey;\n`;\n\nexport default CellContainer;\n","import React, { Component, Fragment } from 'react';\nimport { createGlobalStyle, ThemeProvider } from 'styled-components';\n\nimport CellContainer from '../CellContainer';\n\nconst GlobalStyle = createGlobalStyle`\n  html, body {\n    padding: 0;\n    margin: 0;\n    width: 100%;\n    height: 100%;\n  }\n\n  body {\n    font-family: Arial, Helvetica, sans-serif;\n  }\n`;\n\nclass App extends Component {\n  render() {\n    return (\n        <ThemeProvider theme={{}}>\n          <Fragment>\n            <GlobalStyle/>\n            <CellContainer/>\n          </Fragment>\n        </ThemeProvider>\n\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}