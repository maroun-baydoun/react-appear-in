{"version":3,"sources":["Cell/random.ts","Cell/Cell.tsx","App/App.tsx","index.tsx"],"names":["generateRandomNumber","min","max","Math","floor","random","generateRandomTime","milliseconds","minutes","seconds","Cell","state","_this$state","this","react_default","a","createElement","StyledContainer","react_appear_in_default","PureComponent","styled","_templateObject","GlobalStyle","createGlobalStyle","App_templateObject","App","styled_components_browser_esm","theme","CellContainer","Object","toConsumableArray","Array","map","_","i","src_Cell_Cell","key","Component","_templateObject2","ReactDOM","render","src_App_App","document","getElementById"],"mappings":"0PACaA,EAAuB,SAACC,EAAaC,GAAd,OAClCC,KAAKC,MAAMD,KAAKE,SAAWH,GAAOD,GAEvBK,EAAqB,iBAAO,CACvCC,aAAcP,EAAqB,GAAI,KACvCQ,QAASR,EAAqB,EAAG,GACjCS,QAAST,EAAqB,EAAG,8PCK7BU,6MACJC,qBAAaL,6EAEJ,IAAAM,EACoCC,KAAKF,MAAxCH,EADDI,EACCJ,QAASC,EADVG,EACUH,QAASF,EADnBK,EACmBL,aAC1B,OACEO,EAAAC,EAAAC,cAACC,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAUP,QAASA,EAASC,QAASA,EAASF,aAAcA,GAA5D,oBACoBC,EADpB,MACgCC,EADhC,MAC4CF,EAD5C,eAPWY,iBAebF,EAAkBG,YAAO,MAAPA,CAAHC,KAYNX,0YClCf,IAAMY,EAAcC,YAAHC,KAaXC,mLAEF,OACIX,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAeC,MAAO,IAClBb,EAAAC,EAAAC,cAACY,EAAD,KACAd,EAAAC,EAAAC,cAACM,EAAD,MACCO,OAAAC,EAAA,EAAAD,CAAIE,MAAM,MAAMC,IAAI,SAACC,EAAGC,GAAJ,OAAWpB,EAAAC,EAAAC,cAACmB,EAAD,CAAMC,IAAKF,eANrCG,aAcZT,EAAgBR,YAAO,MAAPA,CAAHkB,KAOJb,ICjCfc,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.52739c23.chunk.js","sourcesContent":["\nexport const generateRandomNumber = (min: number, max: number) =>\n  Math.floor(Math.random() * max) + min ;\n\nexport const generateRandomTime = () => ({\n  milliseconds: generateRandomNumber(10, 100),\n  minutes: generateRandomNumber(0, 1),\n  seconds: generateRandomNumber(5, 30),\n});\n","import React , { PureComponent } from 'react';\nimport AppearIn from 'react-appear-in';\nimport styled from 'styled-components';\n\nimport { generateRandomTime } from './random';\n\ntype State = {\n  minutes: number,\n  seconds: number,\n  milliseconds: number,\n};\n\nclass Cell extends PureComponent<{}, State> {\n  state = { ...generateRandomTime() };\n\n  render() {\n    const { minutes, seconds, milliseconds } = this.state;\n    return (\n      <StyledContainer>\n        <AppearIn minutes={minutes} seconds={seconds} milliseconds={milliseconds}>\n          I appeared after {minutes}m. {seconds}s. {milliseconds}ms.\n        </AppearIn>\n      </StyledContainer>\n    );\n  }\n}\n\nconst StyledContainer = styled('div')`\nbackground-color: darkgrey;\ncolor: #efefef;\nwidth: 150px;\nheight: 100px;\nmargin: 5px;\npadding: 5px;\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\n`;\n\nexport default Cell;\n","import React, { Component } from 'react';\nimport styled, { createGlobalStyle, ThemeProvider } from 'styled-components';\n\nimport Cell from '../Cell';\n\nconst GlobalStyle = createGlobalStyle`\n  html, body {\n    padding: 0;\n    margin: 0;\n    width: 100%;\n    height: 100%;\n  }\n\n  body {\n    font-family: Arial, Helvetica, sans-serif;\n  }\n`;\n\nclass App extends Component {\n  render() {\n    return (\n        <ThemeProvider theme={{}}>\n            <CellContainer>\n            <GlobalStyle/>\n            {[...Array(100)].map((_, i)  => <Cell key={i}/>)}\n          </CellContainer>\n        </ThemeProvider>\n\n    );\n  }\n}\n\nconst CellContainer = styled('div')`\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: space-between;\nbackground-color: grey;\n`;\n\nexport default App;\n","/// <reference path=\"./index.d.ts\" />\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}